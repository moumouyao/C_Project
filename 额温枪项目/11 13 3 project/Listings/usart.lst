C51 COMPILER V9.60.0.0   USART                                                             11/13/2023 20:29:41 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\usart.obj
COMPILER INVOKED BY: D:\Keil_v5\Keil_5\C51\BIN\C51.EXE api\usart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\user;.\api) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\usart.lst) TABS(2) OBJECT(.\Objects\usart.obj)

line level    source

   1          #include "usart.h"
   2          
   3          void UartInit(void)   //9600bps@24.000MHz
   4          {
   5   1        SCON = 0x50;    //8位数据,可变波特率
   6   1        AUXR |= 0x40;   //定时器时钟1T模式
   7   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
   8   1        TMOD &= 0x0F;   //设置定时器模式
   9   1        TL1 = 0x8F;   //设置定时初始  值
  10   1        TH1 = 0xFD;   //设置定时初始值
  11   1        ET1 = 0;    //禁止定时器%d中断
  12   1        TR1 = 1;    //定时器1开始计时
  13   1      }
  14          
  15          
  16          
  17          
  18          
  19          
  20          
  21          
  22          //发送单个字节  不开中断使用
  23          void Uart_SendData(unsigned char byte)
  24          {
  25   1        SBUF = byte;
  26   1        while(TI == 0);
  27   1        TI = 0;
  28   1      }
  29          
  30          //构造printf用的
  31          char putchar(char c)
  32          {
  33   1        SBUF = c;
  34   1        while(!TI);
  35   1        TI = 0;
  36   1        return c;
  37   1      }
  38          
  39          //发送字符串  不开中断使用
  40          void Uart_SendString(unsigned char * str, unsigned int len)
  41          {
  42   1        while(len--)
  43   1          Uart_SendData(*str++);
  44   1      }
  45          
  46          
  47          //串口2配置
  48          void Uart2Init(void)  //9600bps@24.000MHz
  49          {
  50   1        S2CON = 0x50;   //设置串口2控制寄存器，表示使用模式1，允许接收数据
  51   1        AUXR |= 0x04;   //将AUXR寄存器的第2位设置为1，表示定时器时钟1T模式
  52   1        T2L = 0x8F;     //设置定时器2初始值的低8位
  53   1        T2H = 0xFD;     //设置定时器2初始值的高8位
  54   1        AUXR |= 0x10;   //将AUXR寄存器的第4位设置为1，表示定时器2开始计时
C51 COMPILER V9.60.0.0   USART                                                             11/13/2023 20:29:41 PAGE 2   

  55   1        S2CON &=  ~(1<<1);  //关闭UART2发送中断
  56   1        S2CON |=  (1<<0); //打开UART2接收中断
  57   1        IE2   |=  (1<<0); //允许UART2中断
  58   1      }
  59          
  60          
  61          
  62          //串口2接收函数
  63          void Uart2_SendData(unsigned char byte)
  64          {
  65   1        S2BUF = byte;
  66   1        while(SEND_SUCCESS == 0);
  67   1        CLEAN_USART2_SEND();
  68   1      }
  69          
  70          //串口2发送函数
  71          void Uart2_SendString(unsigned char * str, unsigned int len)
  72          {
  73   1        while(len--)
  74   1          Uart2_SendData(*str++);
  75   1      }
  76          
  77          
  78          
  79          unsigned int  xdata UART2_RecvTick = 0;
  80          unsigned char xdata UART2_RecvOver = 0;
  81          unsigned char xdata byte = 0;
  82          unsigned char xdata UART2_RecvCnt = 0;
  83          unsigned char xdata UART2_RecvBuff[32] = {0};
  84          
  85          //串口2中断服务函数，接收传感器返回数据
  86          void usart2_handler (void) interrupt UART2_VECTOR{
  87   1        if(USART2_RECV_INTERRUPT){  //串口2接收中断置1
  88   2          CLEAN_USART2_INTERRUPT();
  89   2          byte = S2BUF;
  90   2          UART2_RecvTick = 1;
  91   2          if(UART2_RecvOver == 0) {
  92   3            UART2_RecvBuff[UART2_RecvCnt++] = byte;
  93   3            UART2_RecvCnt %= 32;
  94   3          }
  95   2        }
  96   1      }
  97          
  98          
  99          //串口2接收数据心跳函数
 100          void usart2_tick(void){
 101   1        if(UART2_RecvTick>0) {
 102   2          UART2_RecvTick++;
 103   2          if(UART2_RecvTick>100){
 104   3            UART2_RecvTick = 0;
 105   3            UART2_RecvOver = 1;
 106   3          }
 107   2        }
 108   1      }
 109          
 110          
 111          
 112          
 113          
 114          


C51 COMPILER V9.60.0.0   USART                                                             11/13/2023 20:29:41 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    295    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     37    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
